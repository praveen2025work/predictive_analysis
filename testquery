– High-Performance Query - Different Approach
– Step 1: Get user’s direct entitlements first, then build hierarchy path

– Approach 1: Direct join with minimal subqueries
SELECT
uem.APP_ID,
uem.USERNAME,
uem.HIERARCHY_ID,
uem.HIERARCHYLEVEL,
– Get hierarchy path by direct joins (much faster than CONNECT BY)
h1.COLNAME as LEVEL1_COLNAME,
h1.COLVALUE as LEVEL1_VALUE,
h2.COLNAME as LEVEL2_COLNAME,
h2.COLVALUE as LEVEL2_VALUE,
h3.COLNAME as LEVEL3_COLNAME,
h3.COLVALUE as LEVEL3_VALUE,
h4.COLNAME as LEVEL4_COLNAME,
h4.COLVALUE as LEVEL4_VALUE,
h5.COLNAME as LEVEL5_COLNAME,
h5.COLVALUE as LEVEL5_VALUE,
– Workflow instance value (user’s deepest level)
CASE
WHEN uem.HIERARCHYLEVEL = 1 THEN h1.COLVALUE
WHEN uem.HIERARCHYLEVEL = 2 THEN h2.COLVALUE
WHEN uem.HIERARCHYLEVEL = 3 THEN h3.COLVALUE
WHEN uem.HIERARCHYLEVEL = 4 THEN h4.COLVALUE
WHEN uem.HIERARCHYLEVEL = 5 THEN h5.COLVALUE
END as WORKFLOW_INSTANCE_VALUE,
– All workflow process data
wp.WORKFLOW_PROCESS_ID,
wp.STATUS,
wp.BUSINESSDATE,
wp.WORKFLOW_APP_CONFIG_ID,
wp.APP_GROUP_ID,
wp.STAGE_ID,
wp.SUBSTAGE_ID,
wp.DEP_SUB_STAGE_SEQ,
wp.AUTO,
wp.ATTEST,
wp.UPLOAD,
wp.ISFORCESTART,
wp.ISRERUN,
wp.UPDATEDBY,
wp.UPDATEDON,
wp.ATTESTEDBY,
wp.ATTESTEDON,
wp.COMPLETEDBY,
wp.COMPLETEDON,
wp.DURATION,
wp.MESSAGE,
wp.ENTITLEMENT_MAPPING,
wp.APPROVAL,
wp.ISLOCKED,
wp.LOCKEDBY,
wp.LOCKEDON,
wp.ISACTIVE as PROCESS_ISACTIVE,
wp.ADHOC,
wp.ISALTERYX,
– Additional useful fields
wa.NAME as APPLICATION_NAME,
ws.NAME as STAGE_NAME,
wss.NAME as SUBSTAGE_NAME,
– Producer/Approver Logic
(SELECT
CASE
WHEN producer_logic.user_count > 0 AND producer_logic.process_count > 0 THEN
CASE
WHEN producer_logic.audit_count = 0 THEN wp.ENTITLEMENT_MAPPING
ELSE producer_logic.audit_entitlement
END
ELSE
CASE
WHEN producer_logic.other_process_count > 0 THEN
CASE
WHEN wp.STAGE_ID IN (producer_logic.exception_stage_id) THEN wp.ENTITLEMENT_MAPPING
ELSE -1
END
ELSE wp.ENTITLEMENT_MAPPING
END
END as PRODUCER_ROLE_ID
FROM (
SELECT
– Check if user has role mapping
(SELECT COUNT(1)
FROM WORKFLOW_APP_USER_ROLE_MAP x,
WORKFLOW_USERS y,
WORKFLOW_ROLES z
WHERE x.ROLEID = z.ROLEID
AND z.ISACTIVE = 1
AND z.EXPIRYDATE = TO_DATE(‘31-DEC-9999’, ‘DD-MON-YYYY’)
AND LOWER(x.USERNAME) = LOWER(y.USERNAME)
AND y.ISACTIVE = 1
AND LOWER(x.USERNAME) LIKE ‘%’ || NVL(LOWER(:temp_user), ‘’) || ‘%’
AND x.ROLEID = wp.ENTITLEMENT_MAPPING
AND x.APP_ID = :app_id) as user_count,

```
        -- Check process count
        (SELECT COUNT(1)
         FROM WORKFLOW_PROCESS wp2
         WHERE wp2.BUSINESSDATE = :business_date
           AND wp2.APP_GROUP_ID = TO_NUMBER(
               CASE 
                   WHEN uem.HIERARCHYLEVEL = 1 THEN h1.COLVALUE
                   WHEN uem.HIERARCHYLEVEL = 2 THEN h2.COLVALUE
                   WHEN uem.HIERARCHYLEVEL = 3 THEN h3.COLVALUE
                   WHEN uem.HIERARCHYLEVEL = 4 THEN h4.COLVALUE
                   WHEN uem.HIERARCHYLEVEL = 5 THEN h5.COLVALUE
               END)
           AND wp2.APP_ID = :app_id
           AND wp2.WORKFLOW_PROCESS_ID = wp.WORKFLOW_PROCESS_ID) as process_count,
        
        -- Check audit count
        (SELECT COUNT(1)
         FROM WORKFLOW_PROCESS_AUD wpa
         WHERE wpa.APP_ID = :app_id
           AND wpa.APP_GROUP_ID = TO_NUMBER(
               CASE 
                   WHEN uem.HIERARCHYLEVEL = 1 THEN h1.COLVALUE
                   WHEN uem.HIERARCHYLEVEL = 2 THEN h2.COLVALUE
                   WHEN uem.HIERARCHYLEVEL = 3 THEN h3.COLVALUE
                   WHEN uem.HIERARCHYLEVEL = 4 THEN h4.COLVALUE
                   WHEN uem.HIERARCHYLEVEL = 5 THEN h5.COLVALUE
               END)
           AND wpa.BUSINESSDATE = :business_date
           AND wpa.STAGE_ID NOT IN (
               SELECT ws_exc.STAGE_ID 
               FROM WORKFLOW_STAGE ws_exc 
               WHERE UPPER(ws_exc.NAME) = 'EXCEPTION' 
                 AND ws_exc.APP_ID = :app_id
           )
           AND LOWER(wpa.UPDATEDBY) LIKE '%' || NVL(LOWER(:temp_user), '') || '%') as audit_count,
        
        -- Get audit entitlement
        (SELECT wpa.ENTITLEMENT_MAPPING
         FROM WORKFLOW_PROCESS_AUD wpa
         WHERE wpa.APP_ID = :app_id
           AND wpa.APP_GROUP_ID = TO_NUMBER(
               CASE 
                   WHEN uem.HIERARCHYLEVEL = 1 THEN h1.COLVALUE
                   WHEN uem.HIERARCHYLEVEL = 2 THEN h2.COLVALUE
                   WHEN uem.HIERARCHYLEVEL = 3 THEN h3.COLVALUE
                   WHEN uem.HIERARCHYLEVEL = 4 THEN h4.COLVALUE
                   WHEN uem.HIERARCHYLEVEL = 5 THEN h5.COLVALUE
               END)
           AND wpa.BUSINESSDATE = :business_date
           AND wpa.STAGE_ID NOT IN (
               SELECT ws_exc.STAGE_ID 
               FROM WORKFLOW_STAGE ws_exc 
               WHERE UPPER(ws_exc.NAME) = 'EXCEPTION' 
                 AND ws_exc.APP_ID = :app_id
           )
           AND LOWER(wpa.UPDATEDBY) LIKE '%' || NVL(LOWER(:temp_user), '') || '%'
           AND ROWNUM = 1) as audit_entitlement,
        
        -- Get exception stage ID
        (SELECT ws_exc.STAGE_ID 
         FROM WORKFLOW_STAGE ws_exc 
         WHERE UPPER(ws_exc.NAME) = 'EXCEPTION' 
           AND ws_exc.APP_ID = :app_id
           AND ROWNUM = 1) as exception_stage_id,
        
        -- Check other process count with different entitlement
        (SELECT COUNT(1)
         FROM (
            SELECT wp3.WORKFLOW_PROCESS_ID, wp3.ENTITLEMENT_MAPPING, wp3.UPDATEDBY
            FROM WORKFLOW_PROCESS wp3
            WHERE wp3.BUSINESSDATE = :business_date
              AND wp3.APP_GROUP_ID = TO_NUMBER(
                  CASE 
                      WHEN uem.HIERARCHYLEVEL = 1 THEN h1.COLVALUE
                      WHEN uem.HIERARCHYLEVEL = 2 THEN h2.COLVALUE
                      WHEN uem.HIERARCHYLEVEL = 3 THEN h3.COLVALUE
                      WHEN uem.HIERARCHYLEVEL = 4 THEN h4.COLVALUE
                      WHEN uem.HIERARCHYLEVEL = 5 THEN h5.COLVALUE
                  END)
              AND wp3.APP_ID = :app_id
              AND LOWER(wp3.UPDATEDBY) LIKE '%' || NVL(LOWER(:temp_user), '') || '%'
              AND wp3.WORKFLOW_PROCESS_ID != wp.WORKFLOW_PROCESS_ID
              AND wp3.STAGE_ID NOT IN (
                  SELECT ws_exc.STAGE_ID 
                  FROM WORKFLOW_STAGE ws_exc 
                  WHERE UPPER(ws_exc.NAME) = 'EXCEPTION' 
                    AND ws_exc.APP_ID = :app_id
              )
            UNION 
            SELECT wpa.WORKFLOW_PROCESS_ID, wpa.ENTITLEMENT_MAPPING, wpa.UPDATEDBY
            FROM WORKFLOW_PROCESS_AUD wpa
            WHERE wpa.BUSINESSDATE = :business_date
              AND wpa.APP_GROUP_ID = TO_NUMBER(
                  CASE 
                      WHEN uem.HIERARCHYLEVEL = 1 THEN h1.COLVALUE
                      WHEN uem.HIERARCHYLEVEL = 2 THEN h2.COLVALUE
                      WHEN uem.HIERARCHYLEVEL = 3 THEN h3.COLVALUE
                      WHEN uem.HIERARCHYLEVEL = 4 THEN h4.COLVALUE
                      WHEN uem.HIERARCHYLEVEL = 5 THEN h5.COLVALUE
                  END)
              AND wpa.APP_ID = :app_id
              AND wpa.STAGE_ID NOT IN (
                  SELECT ws_exc.STAGE_ID 
                  FROM WORKFLOW_STAGE ws_exc 
                  WHERE UPPER(ws_exc.NAME) = 'EXCEPTION' 
                    AND ws_exc.APP_ID = :app_id
              )
              AND LOWER(wpa.UPDATEDBY) LIKE '%' || NVL(LOWER(:temp_user), '') || '%'
              AND wpa.WORKFLOW_PROCESS_ID != wp.WORKFLOW_PROCESS_ID
         ) combined_processes
         WHERE combined_processes.ENTITLEMENT_MAPPING <> wp.ENTITLEMENT_MAPPING) as other_process_count
    FROM DUAL
 ) producer_logic
) as PRODUCER,

-- Similar logic for APPROVER (simplified version)
(SELECT 
    CASE 
        WHEN approver_logic.user_count > 0 AND approver_logic.process_count > 0 THEN
            wp.ENTITLEMENT_MAPPING
        ELSE 
            CASE 
                WHEN wp.STAGE_ID IN (approver_logic.exception_stage_id) THEN wp.ENTITLEMENT_MAPPING
                ELSE -1
            END
    END as APPROVER_ROLE_ID
 FROM (
    SELECT 
        -- Check if user has approver role mapping
        (SELECT COUNT(1)
         FROM WORKFLOW_APP_USER_ROLE_MAP x,
              WORKFLOW_USERS y,
              WORKFLOW_ROLES z
         WHERE x.ROLEID = z.ROLEID
           AND z.ISACTIVE = 1
           AND z.EXPIRYDATE = TO_DATE('31-DEC-9999', 'DD-MON-YYYY')
           AND LOWER(x.USERNAME) = LOWER(y.USERNAME)
           AND y.ISACTIVE = 1
           AND LOWER(x.USERNAME) LIKE '%' || NVL(LOWER(:temp_user), '') || '%'
           AND x.ROLEID = wp.ENTITLEMENT_MAPPING
           AND x.APP_ID = :app_id
           AND UPPER(z.ROLE) LIKE '%APPROVER%') as user_count,
        
        -- Check process count for approver
        (SELECT COUNT(1)
         FROM WORKFLOW_PROCESS wp2
         WHERE wp2.BUSINESSDATE = :business_date
           AND wp2.APP_GROUP_ID = TO_NUMBER(
               CASE 
                   WHEN uem.HIERARCHYLEVEL = 1 THEN h1.COLVALUE
                   WHEN uem.HIERARCHYLEVEL = 2 THEN h2.COLVALUE
                   WHEN uem.HIERARCHYLEVEL = 3 THEN h3.COLVALUE
                   WHEN uem.HIERARCHYLEVEL = 4 THEN h4.COLVALUE
                   WHEN uem.HIERARCHYLEVEL = 5 THEN h5.COLVALUE
               END)
           AND wp2.APP_ID = :app_id
           AND wp2.WORKFLOW_PROCESS_ID = wp.WORKFLOW_PROCESS_ID) as process_count,
        
        -- Get exception stage ID
        (SELECT ws_exc.STAGE_ID 
         FROM WORKFLOW_STAGE ws_exc 
         WHERE UPPER(ws_exc.NAME) = 'EXCEPTION' 
           AND ws_exc.APP_ID = :app_id
           AND ROWNUM = 1) as exception_stage_id
    FROM DUAL
 ) approver_logic
) as APPROVER
```

FROM WORKFLOW_USER_ENTITLEMENT_MAP uem
– Join with application
INNER JOIN WORKFLOW_APPLICATION wa ON uem.APP_ID = wa.APP_ID
– Level 1 (always exists)
LEFT JOIN WORKFLOW_HIERARCHY_DATA h1 ON uem.HIERARCHY_ID = h1.HIERARCHY_ID
AND h1.HIERARCHYLEVEL = 1
AND h1.ISACTIVE = 1
– Level 2 (if exists and user has access)
LEFT JOIN WORKFLOW_HIERARCHY_DATA h2 ON uem.HIERARCHY_ID = h2.HIERARCHY_ID
AND h2.HIERARCHYLEVEL = 2
AND h2.PARENTHIERARCHYLEVEL = 1
AND h2.PARENTCOLVALUE = h1.COLVALUE
AND h2.ISACTIVE = 1
AND uem.HIERARCHYLEVEL >= 2
– Level 3 (if exists and user has access)
LEFT JOIN WORKFLOW_HIERARCHY_DATA h3 ON uem.HIERARCHY_ID = h3.HIERARCHY_ID
AND h3.HIERARCHYLEVEL = 3
AND h3.PARENTHIERARCHYLEVEL = 2
AND h3.PARENTCOLVALUE = h2.COLVALUE
AND h3.ISACTIVE = 1
AND uem.HIERARCHYLEVEL >= 3
– Level 4 (if exists and user has access)
LEFT JOIN WORKFLOW_HIERARCHY_DATA h4 ON uem.HIERARCHY_ID = h4.HIERARCHY_ID
AND h4.HIERARCHYLEVEL = 4
AND h4.PARENTHIERARCHYLEVEL = 3
AND h4.PARENTCOLVALUE = h3.COLVALUE
AND h4.ISACTIVE = 1
AND uem.HIERARCHYLEVEL >= 4
– Level 5 (if exists and user has access)
LEFT JOIN WORKFLOW_HIERARCHY_DATA h5 ON uem.HIERARCHY_ID = h5.HIERARCHY_ID
AND h5.HIERARCHYLEVEL = 5
AND h5.PARENTHIERARCHYLEVEL = 4
AND h5.PARENTCOLVALUE = h4.COLVALUE
AND h5.ISACTIVE = 1
AND uem.HIERARCHYLEVEL >= 5
– Join with workflow process using the deepest level value as APP_GROUP_ID
INNER JOIN WORKFLOW_PROCESS wp ON uem.APP_ID = wp.APP_ID
AND wp.APP_GROUP_ID = CASE
WHEN uem.HIERARCHYLEVEL = 1 THEN TO_NUMBER(h1.COLVALUE)
WHEN uem.HIERARCHYLEVEL = 2 THEN TO_NUMBER(h2.COLVALUE)
WHEN uem.HIERARCHYLEVEL = 3 THEN TO_NUMBER(h3.COLVALUE)
WHEN uem.HIERARCHYLEVEL = 4 THEN TO_NUMBER(h4.COLVALUE)
WHEN uem.HIERARCHYLEVEL = 5 THEN TO_NUMBER(h5.COLVALUE)
END
– Optional joins for stage/substage names
LEFT JOIN WORKFLOW_STAGE ws ON wp.STAGE_ID = ws.STAGE_ID
LEFT JOIN WORKFLOW_SUBSTAGE wss ON wp.SUBSTAGE_ID = wss.SUBSTAGE_ID
WHERE uem.USERNAME = :username
AND uem.APP_ID = :app_id                    – REQUIRED: specific app
AND wp.BUSINESSDATE = :business_date        – REQUIRED: specific date
AND wp.STATUS = ‘IN_PROGRESS’               – REQUIRED: only in progress
AND wp.AUTO = ‘N’                          – REQUIRED: manual processes only
– Ensure we have the workflow instance value
AND CASE
WHEN uem.HIERARCHYLEVEL = 1 THEN h1.COLVALUE
WHEN uem.HIERARCHYLEVEL = 2 THEN h2.COLVALUE
WHEN uem.HIERARCHYLEVEL = 3 THEN h3.COLVALUE
WHEN uem.HIERARCHYLEVEL = 4 THEN h4.COLVALUE
WHEN uem.HIERARCHYLEVEL = 5 THEN h5.COLVALUE
END IS NOT NULL
ORDER BY uem.APP_ID, wp.APP_GROUP_ID, wp.STAGE_ID, wp.SUBSTAGE_ID, wp.DEP_SUB_STAGE_SEQ;

– Approach 2: Even simpler - Two-step approach for maximum performance
– Step 1: Get user entitlements with hierarchy data (fast lookup)

WITH user_hierarchy AS (
SELECT /*+ INDEX(uem) */
uem.APP_ID,
uem.USERNAME,
uem.HIERARCHY_ID,
uem.HIERARCHYLEVEL,
hd.COLNAME,
hd.COLVALUE,
hd.HIERARCHYLEVEL as DATA_LEVEL
FROM WORKFLOW_USER_ENTITLEMENT_MAP uem
INNER JOIN WORKFLOW_HIERARCHY_DATA hd ON uem.HIERARCHY_ID = hd.HIERARCHY_ID
AND hd.HIERARCHYLEVEL <= uem.HIERARCHYLEVEL
AND hd.ISACTIVE = 1
WHERE uem.USERNAME = :username
AND (:app_id IS NULL OR uem.APP_ID = :app_id)
),
hierarchy_pivoted AS (
SELECT
APP_ID,
USERNAME,
HIERARCHY_ID,
HIERARCHYLEVEL,
MAX(CASE WHEN DATA_LEVEL = 1 THEN COLNAME END) as LEVEL1_COLNAME,
MAX(CASE WHEN DATA_LEVEL = 1 THEN COLVALUE END) as LEVEL1_VALUE,
MAX(CASE WHEN DATA_LEVEL = 2 THEN COLNAME END) as LEVEL2_COLNAME,
MAX(CASE WHEN DATA_LEVEL = 2 THEN COLVALUE END) as LEVEL2_VALUE,
MAX(CASE WHEN DATA_LEVEL = 3 THEN COLNAME END) as LEVEL3_COLNAME,
MAX(CASE WHEN DATA_LEVEL = 3 THEN COLVALUE END) as LEVEL3_VALUE,
MAX(CASE WHEN DATA_LEVEL = 4 THEN COLNAME END) as LEVEL4_COLNAME,
MAX(CASE WHEN DATA_LEVEL = 4 THEN COLVALUE END) as LEVEL4_VALUE,
MAX(CASE WHEN DATA_LEVEL = 5 THEN COLNAME END) as LEVEL5_COLNAME,
MAX(CASE WHEN DATA_LEVEL = 5 THEN COLVALUE END) as LEVEL5_VALUE,
MAX(CASE WHEN DATA_LEVEL = HIERARCHYLEVEL THEN COLVALUE END) as WORKFLOW_INSTANCE_VALUE
FROM user_hierarchy
GROUP BY APP_ID, USERNAME, HIERARCHY_ID, HIERARCHYLEVEL
)
SELECT /*+ INDEX(wp) */
hp.*,
wp.WORKFLOW_PROCESS_ID,
wp.STATUS,
wp.BUSINESSDATE,
wp.WORKFLOW_APP_CONFIG_ID,
wp.APP_GROUP_ID,
wp.STAGE_ID,
wp.SUBSTAGE_ID,
wp.DEP_SUB_STAGE_SEQ,
wp.AUTO,
wp.ATTEST,
wp.UPLOAD,
wp.ISFORCESTART,
wp.ISRERUN,
wp.UPDATEDBY,
wp.UPDATEDON,
wp.ATTESTEDBY,
wp.ATTESTEDON,
wp.COMPLETEDBY,
wp.COMPLETEDON,
wp.DURATION,
wp.MESSAGE,
wp.ENTITLEMENT_MAPPING,
wp.APPROVAL,
wp.ISLOCKED,
wp.LOCKEDBY,
wp.LOCKEDON,
wp.ISACTIVE as PROCESS_ISACTIVE,
wp.ADHOC,
wp.ISALTERYX,
wa.NAME as APPLICATION_NAME,
ws.NAME as STAGE_NAME,
wss.NAME as SUBSTAGE_NAME
FROM hierarchy_pivoted hp
INNER JOIN WORKFLOW_PROCESS wp ON hp.APP_ID = wp.APP_ID
AND TO_NUMBER(hp.WORKFLOW_INSTANCE_VALUE) = wp.APP_GROUP_ID
LEFT JOIN WORKFLOW_APPLICATION wa ON hp.APP_ID = wa.APP_ID
LEFT JOIN WORKFLOW_STAGE ws ON wp.STAGE_ID = ws.STAGE_ID
LEFT JOIN WORKFLOW_SUBSTAGE wss ON wp.SUBSTAGE_ID = wss.SUBSTAGE_ID
WHERE uem.USERNAME = :username
AND uem.APP_ID = :app_id                    – REQUIRED: specific app
AND wp.BUSINESSDATE = :business_date        – REQUIRED: specific date  
AND wp.STATUS = ‘IN_PROGRESS’               – REQUIRED: only in progress
AND wp.AUTO = ‘N’                          – REQUIRED: manual processes only
ORDER BY hp.APP_ID, wp.APP_GROUP_ID, wp.STAGE_ID, wp.SUBSTAGE_ID, wp.DEP_SUB_STAGE_SEQ;

– Approach 3: Super simple for dashboard - minimal joins
– Use this for React dashboard performance

SELECT
uem.APP_ID,
uem.USERNAME,
TO_NUMBER(hd_final.COLVALUE) as APP_GROUP_ID,
hd_final.COLVALUE as WORKFLOW_INSTANCE_VALUE,
– Get level names/values with simple subqueries
(SELECT hd1.COLNAME FROM WORKFLOW_HIERARCHY_DATA hd1
WHERE hd1.HIERARCHY_ID = uem.HIERARCHY_ID AND hd1.HIERARCHYLEVEL = 1 AND hd1.ISACTIVE = 1 AND ROWNUM = 1) as LEVEL1_COLNAME,
(SELECT hd1.COLVALUE FROM WORKFLOW_HIERARCHY_DATA hd1
WHERE hd1.HIERARCHY_ID = uem.HIERARCHY_ID AND hd1.HIERARCHYLEVEL = 1 AND hd1.ISACTIVE = 1 AND ROWNUM = 1) as LEVEL1_VALUE,
(SELECT hd2.COLNAME FROM WORKFLOW_HIERARCHY_DATA hd2
WHERE hd2.HIERARCHY_ID = uem.HIERARCHY_ID AND hd2.HIERARCHYLEVEL = 2 AND hd2.ISACTIVE = 1 AND ROWNUM = 1) as LEVEL2_COLNAME,
(SELECT hd2.COLVALUE FROM WORKFLOW_HIERARCHY_DATA hd2
WHERE hd2.HIERARCHY_ID = uem.HIERARCHY_ID AND hd2.HIERARCHYLEVEL = 2 AND hd2.ISACTIVE = 1 AND ROWNUM = 1) as LEVEL2_VALUE,
– Workflow process count and status summary
COUNT(*) as TOTAL_PROCESSES,
SUM(CASE WHEN wp.STATUS = ‘COMPLETED’ THEN 1 ELSE 0 END) as COMPLETED_COUNT,
SUM(CASE WHEN wp.STATUS = ‘IN_PROGRESS’ THEN 1 ELSE 0 END) as IN_PROGRESS_COUNT,
SUM(CASE WHEN wp.STATUS = ‘FAILED’ THEN 1 ELSE 0 END) as FAILED_COUNT,
SUM(CASE WHEN wp.STATUS = ‘NOT_STARTED’ THEN 1 ELSE 0 END) as NOT_STARTED_COUNT,
ROUND(SUM(CASE WHEN wp.STATUS = ‘COMPLETED’ THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) as COMPLETION_PERCENTAGE,
MAX(wp.UPDATEDON) as LAST_UPDATED,
wa.NAME as APPLICATION_NAME
FROM WORKFLOW_USER_ENTITLEMENT_MAP uem
– Get the final level data directly
INNER JOIN WORKFLOW_HIERARCHY_DATA hd_final ON uem.HIERARCHY_ID = hd_final.HIERARCHY_ID
AND hd_final.HIERARCHYLEVEL = uem.HIERARCHYLEVEL
AND hd_final.ISACTIVE = 1
– Join with workflow process
INNER JOIN WORKFLOW_PROCESS wp ON uem.APP_ID = wp.APP_ID
AND TO_NUMBER(hd_final.COLVALUE) = wp.APP_GROUP_ID
– Get application name
LEFT JOIN WORKFLOW_APPLICATION wa ON uem.APP_ID = wa.APP_ID
WHERE uem.USERNAME = :username
AND uem.APP_ID = :app_id                    – REQUIRED: specific app
AND wp.BUSINESSDATE = :business_date        – REQUIRED: specific date
AND wp.STATUS = ‘IN_PROGRESS’               – REQUIRED: only in progress  
AND wp.AUTO = ‘N’                          – REQUIRED: manual processes only
GROUP BY
uem.APP_ID,
uem.USERNAME,
uem.HIERARCHY_ID,
uem.HIERARCHYLEVEL,
hd_final.COLVALUE,
wa.NAME
ORDER BY uem.APP_ID, TO_NUMBER(hd_final.COLVALUE);

– If you need individual process details, use this separate query:
SELECT
wp.*,
ws.NAME as STAGE_NAME,
wss.NAME as SUBSTAGE_NAME
FROM WORKFLOW_USER_ENTITLEMENT_MAP uem
INNER JOIN WORKFLOW_HIERARCHY_DATA hd ON uem.HIERARCHY_ID = hd.HIERARCHY_ID
AND hd.HIERARCHYLEVEL = uem.HIERARCHYLEVEL
AND hd.ISACTIVE = 1
INNER JOIN WORKFLOW_PROCESS wp ON uem.APP_ID = wp.APP_ID
AND TO_NUMBER(hd.COLVALUE) = wp.APP_GROUP_ID
LEFT JOIN WORKFLOW_STAGE ws ON wp.STAGE_ID = ws.STAGE_ID
LEFT JOIN WORKFLOW_SUBSTAGE wss ON wp.SUBSTAGE_ID = wss.SUBSTAGE_ID
WHERE uem.USERNAME = :username
AND uem.APP_ID = :app_id
AND TO_NUMBER(hd.COLVALUE) = :app_group_id
AND (:business_date IS NULL OR wp.BUSINESSDATE = :business_date)
ORDER BY wp.STAGE_ID, wp.SUBSTAGE_ID, wp.DEP_SUB_STAGE_SEQ;