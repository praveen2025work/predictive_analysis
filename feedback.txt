<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Exception Workflow Design Overview</title>
  <style>
    body { font-family: 'Segoe UI', sans-serif; margin: 30px; color: #222; background: #f9fafc; }
    h1, h2 { color: #004b8d; }
    table { border-collapse: collapse; width: 100%; margin-bottom: 30px; }
    th, td { border: 1px solid #ddd; padding: 10px; text-align: left; font-size: 14px; }
    th { background-color: #004b8d; color: white; }
    tr:nth-child(even) { background-color: #f2f2f2; }
    code { background: #eef; padding: 2px 4px; border-radius: 4px; }
    .box { background: white; padding: 15px 25px; border-radius: 10px; box-shadow: 0 2px 6px rgba(0,0,0,0.1); margin-bottom: 25px; }
    .flow { background: #eaf4ff; border-left: 4px solid #0074d9; padding: 15px; margin: 10px 0; border-radius: 5px; }
  </style>
</head>
<body>

<h1>üìò Exception Workflow Engine ‚Äî Technical Overview</h1>

<p>This document outlines the workflow-driven exception handling system with SLA tracking, audit support, and automatic step progression.</p>

<div class="box">
  <h2>1Ô∏è‚É£ Core Tables</h2>
  <table>
    <tr><th>Table</th><th>Description</th></tr>
    <tr><td><b>EXCEPTION_WORKFLOW</b></td><td>Base exception data (trade, instrument, book info). Workflow-related fields moved out.</td></tr>
    <tr><td><b>WORKFLOW_METADATA</b></td><td>Defines workflow structure, allowed actions, and next step mappings.</td></tr>
    <tr><td><b>WORKFLOW_INSTANCE</b></td><td>Tracks each instance of an exception workflow. Holds current step, status, and assigned user.</td></tr>
    <tr><td><b>SLA_CONFIG</b></td><td>Contains SLA hours and email templates per step.</td></tr>
    <tr><td><b>WORKFLOW_ACTION_HISTORY</b></td><td>Audit of every workflow action (who did what and when).</td></tr>
  </table>
</div>

<div class="box">
  <h2>2Ô∏è‚É£ Workflow Metadata ‚Äî FO Challenge Example</h2>
  <table>
    <tr>
      <th>STEP_CODE</th><th>STEP_NAME</th><th>ROLE</th>
      <th>ACTIONS_ALLOWED</th><th>NEXT_STEP_ON_SUBMIT</th>
      <th>NEXT_STEP_ON_APPROVE</th><th>NEXT_STEP_ON_REJECT</th>
    </tr>
    <tr>
      <td>STEP1</td><td>FO Raises Challenge</td><td>FO_OWNER</td>
      <td>SUBMIT</td><td>STEP2, STEP3</td><td>-</td><td>-</td>
    </tr>
    <tr>
      <td>STEP2</td><td>FO Business Review</td><td>FO_BUSINESS</td>
      <td>APPROVE, REJECT</td><td>-</td><td>STEP4</td><td>STEP4</td>
    </tr>
    <tr>
      <td>STEP3</td><td>Reg Policy Review</td><td>REG_POLICY</td>
      <td>APPROVE, REJECT</td><td>-</td><td>STEP4</td><td>STEP4</td>
    </tr>
    <tr>
      <td>STEP4</td><td>FO Owner Final Action</td><td>FO_OWNER</td>
      <td>CLOSE</td><td>-</td><td>-</td><td>-</td>
    </tr>
  </table>
</div>

<div class="box">
  <h2>3Ô∏è‚É£ Example Instance Flow (EXC_20251022001)</h2>

  <div class="flow">
    <b>STEP 1 ‚Üí STEP 2:</b> FO Owner raises challenge, submits to FO Business.<br>
    <code>
    STATUS: COMPLETED, ACTIVE_STEP_FLAG = 'N'<br>
    NEXT ACTIVE: STEP2 (FO_BUSINESS)
    </code>
  </div>

  <div class="flow">
    <b>STEP 2 ‚Üí STEP 4:</b> FO Business approves challenge, sent back to FO Owner for final closure.<br>
    <code>
    STATUS: COMPLETED, ACTIVE_STEP_FLAG = 'N'<br>
    NEXT ACTIVE: STEP4 (FO_OWNER)
    </code>
  </div>

  <div class="flow">
    <b>STEP 4:</b> FO Owner closes workflow.<br>
    <code>STATUS: CLOSED</code>
  </div>

  <table>
    <tr>
      <th>INSTANCE_ID</th><th>EXCEPTION_ID</th><th>CURRENT_STEP</th><th>STATUS</th>
      <th>ASSIGNED_TO</th><th>ACTIVE_FLAG</th><th>COMMENTS</th>
    </tr>
    <tr>
      <td>1001</td><td>EXC_20251022001</td><td>STEP1</td><td>COMPLETED</td><td>BR12345</td><td>N</td><td>Submitted to FO Business</td>
    </tr>
    <tr>
      <td>1002</td><td>EXC_20251022001</td><td>STEP2</td><td>IN_PROGRESS</td><td>BR56789</td><td>Y</td><td>FO Business reviewing</td>
    </tr>
    <tr>
      <td>1003</td><td>EXC_20251022001</td><td>STEP4</td><td>CLOSED</td><td>BR12345</td><td>N</td><td>Challenge approved and closed</td>
    </tr>
  </table>
</div>

<div class="box">
  <h2>4Ô∏è‚É£ Automatic Backend Flow</h2>
  <ol>
    <li>Backend fetches <code>WORKFLOW_METADATA</code> for current step.</li>
    <li>Checks <code>ACTIONS_ALLOWED</code> to validate user action.</li>
    <li>On action (SUBMIT / APPROVE / REJECT):  
      <ul>
        <li>Marks current step as <b>COMPLETED</b></li>
        <li>Determines next step using metadata columns</li>
        <li>Creates a new active instance row for next step</li>
        <li>Sends SLA-based email notification</li>
      </ul>
    </li>
    <li>Every change is logged in <code>WORKFLOW_ACTION_HISTORY</code></li>
  </ol>
</div>

<div class="box">
  <h2>5Ô∏è‚É£ SLA and Email Configuration</h2>
  <table>
    <tr><th>STEP_CODE</th><th>SLA_HOURS</th><th>EMAIL_TEMPLATE_ID</th><th>TRIGGER_ON</th></tr>
    <tr><td>STEP1</td><td>24</td><td>201</td><td>ON_CREATE</td></tr>
    <tr><td>STEP2</td><td>12</td><td>202</td><td>ON_ASSIGN</td></tr>
    <tr><td>STEP4</td><td>8</td><td>203</td><td>ON_STATUS_CHANGE</td></tr>
  </table>
</div>

<footer style="text-align:center; font-size:12px; color:#777;">
  ¬© 2025 Exception Workflow System | Internal Use Only
</footer>

</body>
</html>

Perfect ‚Äî now that you‚Äôve got the logic and reasoning locked in ‚úÖ, let‚Äôs formalize this into:

1. **A complete relational schema (finalized tables).**
2. **Sample data that matches the Challenge workflow logic.**
3. **A comprehensive AI code-generation prompt** (you can give this to your codegen agent to auto-build backend APIs, workflow engine logic, SLA/email triggers, etc.).

---

## üß© 1Ô∏è‚É£ Final Database Tables

| Table Name            | Purpose                                                                               |
| --------------------- | ------------------------------------------------------------------------------------- |
| `EXCEPTION_WORKFLOW`  | Holds static exception data (your original table minus workflow-specific fields).     |
| `WORKFLOW_INSTANCE`   | Tracks which step each exception is currently in, who owns it, and its status.        |
| `WORKFLOW_METADATA`   | Defines the workflow graph ‚Äî steps, transitions, roles, and actions.                  |
| `WORKFLOW_SLA_CONFIG` | Defines SLA hours and email templates per workflow step.                              |
| `EXCEPTION_ACCESS`    | Defines which users (BRIDs) have what role (e.g., FO, FO_BUSINESS, REG_POLICY, etc.). |
| `USER_INFO`           | Holds user details (BRID, email, active status, etc.).                                |

---

### üß± Table: `EXCEPTION_WORKFLOW`

*(Original, only workflow-related columns removed ‚Äî email & SLA handled separately)*

```sql
CREATE TABLE EXCEPTION_WORKFLOW (
    ID NUMBER PRIMARY KEY,
    EXCEPTION_ID VARCHAR2(250 BYTE),
    EQUITY_CLASS_TYPE VARCHAR2(250 CHAR),
    REGULATOR VARCHAR2(250 BYTE),
    AGING NUMBER(10),
    AS_OF_TIME TIMESTAMP(6),
    BB_UNDERLYING VARCHAR2(250 CHAR),
    ESM_SECURITY_TYPE VARCHAR2(50 CHAR),
    INSTRUMENT_ID NUMBER(10),
    INSTRUMENT_NAME VARCHAR2(250 CHAR),
    INSTRUMENT_TYPE VARCHAR2(50 CHAR),
    LEGAL_ENTITY VARCHAR2(50 CHAR),
    LOOK_THROUGH VARCHAR2(50 CHAR),
    POSITION_AV VARCHAR2(1000 CHAR),
    POSITION_QTY NUMBER(10),
    POSITION_TBBB_CLASSIFICATION VARCHAR2(250 CHAR),
    PROCESSED_ON TIMESTAMP(6),
    SDS_BOOK_CODE NUMBER(10),
    SDS_BOOK_PATH VARCHAR2(1000 CHAR),
    SOD_DELTA_BB_UNDERLYING VARCHAR2(1000 CHAR),
    STATUS VARCHAR2(50 CHAR),
    SYSTEM VARCHAR2(50 CHAR),
    REASON CLOB,
    ORIGINAL_QTY NUMBER,
    CATEGORY_ID NUMBER,
    SOURCE VARCHAR2(255 BYTE),
    TETB_AV VARCHAR2(1000 BYTE),
    TETB_QUANTITY NUMBER,
    LEVEL_1 VARCHAR2(50 BYTE),
    LEVEL_2 VARCHAR2(50 BYTE),
    LEVEL_3 VARCHAR2(50 BYTE),
    LEVEL_4 VARCHAR2(50 BYTE),
    LEVEL_5 VARCHAR2(50 BYTE),
    LEVEL_6 VARCHAR2(50 BYTE),
    LEVEL_7 VARCHAR2(50 BYTE),
    ACTION_OWNER VARCHAR2(255 BYTE),
    REPORTING_CCY VARCHAR2(5 BYTE)
);
```

---

### üß± Table: `WORKFLOW_METADATA`

```sql
CREATE TABLE WORKFLOW_METADATA (
    WORKFLOW_ID NUMBER,
    STEP_CODE VARCHAR2(100 BYTE),
    STEP_NAME VARCHAR2(255 BYTE),
    ROLE VARCHAR2(100 BYTE),
    ACTIONS_ALLOWED VARCHAR2(255 BYTE),
    NEXT_STEP_ON_APPROVE VARCHAR2(100 BYTE),
    NEXT_STEP_ON_REJECT VARCHAR2(100 BYTE),
    DESCRIPTION VARCHAR2(500 BYTE),
    PRIMARY KEY (WORKFLOW_ID, STEP_CODE)
);
```

---

### üß± Table: `WORKFLOW_INSTANCE`

```sql
CREATE TABLE WORKFLOW_INSTANCE (
    INSTANCE_ID NUMBER PRIMARY KEY,
    EXCEPTION_ID VARCHAR2(250 BYTE),
    WORKFLOW_ID NUMBER,
    CURRENT_STEP VARCHAR2(100 BYTE),
    STATUS VARCHAR2(50 BYTE),
    ASSIGNED_TO_BRID VARCHAR2(50 BYTE),
    LAST_UPDATED TIMESTAMP(6),
    COMMENTS CLOB
);
```

---

### üß± Table: `WORKFLOW_SLA_CONFIG`

```sql
CREATE TABLE WORKFLOW_SLA_CONFIG (
    WORKFLOW_ID NUMBER,
    STEP_CODE VARCHAR2(100 BYTE),
    SLA_HOURS NUMBER,
    EMAIL_TEMPLATE_ID NUMBER,
    TRIGGER_ON VARCHAR2(50 BYTE),
    PRIMARY KEY (WORKFLOW_ID, STEP_CODE)
);
```

---

### üß± Table: `EXCEPTION_ACCESS`

```sql
CREATE TABLE EXCEPTION_ACCESS (
    EXCEPTION_ACCESS_ID NUMBER PRIMARY KEY,
    ROLE VARCHAR2(100 BYTE),
    BRID VARCHAR2(50 BYTE),
    PRODUCT_AREA VARCHAR2(50 BYTE),
    BUSINESS_AREA VARCHAR2(50 BYTE)
);
```

---

### üß± Table: `USER_INFO`

```sql
CREATE TABLE USER_INFO (
    USER_ID VARCHAR2(50 BYTE) PRIMARY KEY,
    BRID VARCHAR2(50 BYTE),
    DISPLAY_NAME VARCHAR2(200 BYTE),
    EMAIL_ID VARCHAR2(300 BYTE),
    TYPE VARCHAR2(200 BYTE),
    IS_ACTIVE NUMBER(1),
    CREATED_AT TIMESTAMP(6),
    UPDATED_AT TIMESTAMP(6)
);
```

---

## üßÆ 2Ô∏è‚É£ Sample Data (Challenge Workflow)

### `WORKFLOW_METADATA`

| WORKFLOW_ID | STEP_CODE          | ROLE        | ACTIONS_ALLOWED                                  | NEXT_STEP_ON_APPROVE | NEXT_STEP_ON_REJECT | DESCRIPTION                     |
| ----------- | ------------------ | ----------- | ------------------------------------------------ | -------------------- | ------------------- | ------------------------------- |
| 201         | FO_CHALLENGE       | FO          | Approve                                          | FO_BUSINESS_REVIEW   | CLOSED              | FO initiates a challenge        |
| 201         | FO_BUSINESS_REVIEW | FO_BUSINESS | Approve,Reject                                   | FO_OWNER_REVIEW      | REG_POLICY_REVIEW   | FO Business review of challenge |
| 201         | REG_POLICY_REVIEW  | REG_POLICY  | Approve,Reject                                   | FO_OWNER_REVIEW      | CLOSED              | Reg Policy review               |
| 201         | FO_OWNER_REVIEW    | FO_OWNER    | MarkAsUncertain,Unwind,RequestReassignment,Close | CLOSED               | CLOSED              | FO Owner final decision         |

---

### `WORKFLOW_SLA_CONFIG`

| WORKFLOW_ID | STEP_CODE          | SLA_HOURS | EMAIL_TEMPLATE_ID | TRIGGER_ON |
| ----------- | ------------------ | --------- | ----------------- | ---------- |
| 201         | FO_BUSINESS_REVIEW | 8         | 401               | StepStart  |
| 201         | REG_POLICY_REVIEW  | 12        | 402               | StepStart  |
| 201         | FO_OWNER_REVIEW    | 8         | 403               | StepStart  |

---

### `EXCEPTION_ACCESS`

| EXCEPTION_ACCESS_ID | ROLE        | BRID   | PRODUCT_AREA | BUSINESS_AREA |
| ------------------- | ----------- | ------ | ------------ | ------------- |
| 101                 | FO          | BR1001 | EQ           | APAC          |
| 102                 | FO_BUSINESS | BR1002 | EQ           | APAC          |
| 103                 | REG_POLICY  | BR1003 | EQ           | APAC          |
| 104                 | FO_OWNER    | BR1004 | EQ           | APAC          |

---

### `WORKFLOW_INSTANCE`

| INSTANCE_ID | EXCEPTION_ID | WORKFLOW_ID | CURRENT_STEP       | STATUS      | ASSIGNED_TO_BRID | COMMENTS                    |
| ----------- | ------------ | ----------- | ------------------ | ----------- | ---------------- | --------------------------- |
| 501         | EXC-CH-002   | 201         | FO_BUSINESS_REVIEW | IN_PROGRESS | BR1002           | Awaiting FO Business review |

---

## üîÑ 3Ô∏è‚É£ Example Flow (Challenge Workflow)

| Step               | Role        | Action  | Next Step          | Next Role   | Email Template | SLA    |
| ------------------ | ----------- | ------- | ------------------ | ----------- | -------------- | ------ |
| FO_CHALLENGE       | FO          | Approve | FO_BUSINESS_REVIEW | FO_BUSINESS | Template 401   | 8 hrs  |
| FO_BUSINESS_REVIEW | FO_BUSINESS | Approve | FO_OWNER_REVIEW    | FO_OWNER    | Template 403   | 8 hrs  |
| FO_BUSINESS_REVIEW | FO_BUSINESS | Reject  | REG_POLICY_REVIEW  | REG_POLICY  | Template 402   | 12 hrs |
| REG_POLICY_REVIEW  | REG_POLICY  | Approve | FO_OWNER_REVIEW    | FO_OWNER    | Template 403   | 8 hrs  |
| REG_POLICY_REVIEW  | REG_POLICY  | Reject  | CLOSED             | -           | -              | -      |

---

## üß† 4Ô∏è‚É£ AI Agent Prompt (for Backend Code Generation)

You can feed the following to your AI code generator (Python, Java, or Node backend):

---

### üß© **Prompt for AI Code Agent**

> Build a backend service for a workflow automation system using Spring Boot + JPA (or FastAPI if Python).
> The database schema includes the following tables:
> `EXCEPTION_WORKFLOW`, `WORKFLOW_METADATA`, `WORKFLOW_INSTANCE`, `WORKFLOW_SLA_CONFIG`, `EXCEPTION_ACCESS`, and `USER_INFO`.
>
> Requirements:
>
> 1. Implement endpoints to:
>
>    * Create and start a workflow (`/workflow/start`)
>    * Perform actions on a workflow (`/workflow/action`)
>    * Retrieve current status and next assignee (`/workflow/status/{exceptionId}`)
> 2. Logic:
>
>    * On action (`Approve`, `Reject`, etc.), backend fetches `WORKFLOW_METADATA` to determine next step (`NEXT_STEP_ON_APPROVE` or `NEXT_STEP_ON_REJECT`).
>    * Then, find next role and assign to a user from `EXCEPTION_ACCESS` with that role.
>    * Update `WORKFLOW_INSTANCE` (set `CURRENT_STEP`, `STATUS`, and `ASSIGNED_TO_BRID`).
>    * Trigger email via template in `WORKFLOW_SLA_CONFIG` and start SLA timer.
> 3. Store all updates with Envers-based audit trail.
> 4. Include service-level validations:
>
>    * Verify action is in `ACTIONS_ALLOWED`.
>    * Auto-close workflow if next step is `CLOSED`.
> 5. Create REST payload examples:
>
>    * `/workflow/action`:
>
>      ```json
>      {
>        "exceptionId": "EXC-CH-002",
>        "action": "Approve",
>        "performedBy": "BR1002",
>        "comments": "Challenge accepted"
>      }
>      ```
> 6. Output should include backend code to:
>
>    * Manage transitions
>    * Update workflow instance
>    * Send email notifications
>    * Apply SLA timers
>    * Record audit trail

---

Would you like me to generate a **visual data flow diagram** (Challenge flow end-to-end, showing how metadata drives backend transitions)?
It would help if you plan to give this to your development team or AI builder tool.
