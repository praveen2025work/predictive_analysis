# Set the base directory for the project
$baseDir = "C:\file-upload-center"
$zipFile = "C:\file-upload-center.zip"

# Create directory structure
New-Item -Path $baseDir -ItemType Directory -Force
New-Item -Path "$baseDir\scripts" -ItemType Directory -Force
New-Item -Path "$baseDir\static" -ItemType Directory -Force
New-Item -Path "$baseDir\templates" -ItemType Directory -Force
New-Item -Path "$baseDir\env" -ItemType Directory -Force

# Define file contents
$files = @{
    "$baseDir\app.py" = @'
from flask import Flask, request, send_file, jsonify, render_template, redirect, url_for, make_response, session
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user
from werkzeug.utils import secure_filename
from datetime import datetime
import os
import sqlite3
import logging
import requests
from requests_kerberos import HTTPKerberosAuth, REQUIRED
from config import get_config

# Initialize Flask app
app = Flask(__name__)
config = get_config()
app.config.from_object(config)

# Setup logging
try:
    os.makedirs(os.path.dirname(config.LOG_FILE), exist_ok=True)
    logging.basicConfig(
        level=getattr(logging, config.LOG_LEVEL),
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler(config.LOG_FILE, mode='a', encoding='utf-8'),
            logging.StreamHandler()
        ]
    )
    logging.debug('Logging initialized successfully')
except Exception as e:
    print(f"Failed to initialize logging: {e}")
    logging.error(f"Failed to initialize logging: {e}")

# Ensure base directory exists
if not os.path.exists(config.UPLOAD_BASE_DIR):
    try:
        os.makedirs(config.UPLOAD_BASE_DIR)
        logging.debug(f'Created UPLOAD_BASE_DIR: {config.UPLOAD_BASE_DIR}')
    except Exception as e:
        logging.error(f'Failed to create UPLOAD_BASE_DIR: {e}')

# Initialize SQLite database
def init_db():
    try:
        with sqlite3.connect(config.DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS uploads (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    filename TEXT NOT NULL,
                    size INTEGER NOT NULL,
                    upload_time TEXT NOT NULL,
                    user_id TEXT NOT NULL,
                    file_location TEXT NOT NULL,
                    download_count INTEGER DEFAULT 0
                )
            ''')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_user_id ON uploads(user_id)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_upload_time ON uploads(upload_time)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_filename ON uploads(filename)')
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS shared_uploads (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    upload_id INTEGER NOT NULL,
                    shared_by TEXT NOT NULL,
                    shared_with TEXT NOT NULL,
                    shared_time TEXT NOT NULL,
                    FOREIGN KEY(upload_id) REFERENCES uploads(id)
                )
            ''')
            conn.commit()
            logging.debug('Initialized SQLite database with indexes and shared_uploads table')
    except Exception as e:
        logging.error(f'Failed to initialize database: {e}')

# Custom Jinja2 filters
def datetime_strftime(value, format='%Y-%m-%d %H:%M:%S'):
    try:
        if isinstance(value, str):
            value = datetime.fromisoformat(value)
        return value.strftime(format)
    except Exception as e:
        logging.error(f'Error in strftime filter: {e}')
        return value

def now():
    return datetime.now()

app.jinja_env.filters['strftime'] = datetime_strftime
app.jinja_env.filters['now'] = now

# Flask-Login setup
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'index'

# User class for Flask-Login
class User(UserMixin):
    def __init__(self, id, username, display_name, employee_id):
        self.id = id
        self.username = username
        self.display_name = display_name
        self.employee_id = employee_id

# Global users dict
users = {}

# Fetch user details using Windows authentication
def get_user_details():
    try:
        headers = {
            'Accept': 'application/json, text/plain, */*',
            'Accept-Encoding': 'gzip, deflate',
            'Accept-Language': 'en-US,en;q=0.9',
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36'
        }
        logging.debug('Calling AUTH_API_URL with Kerberos authentication')
        response = requests.get(config.AUTH_API_URL, auth=HTTPKerberosAuth(mutual_authentication=REQUIRED), headers=headers, timeout=5)
        logging.debug('AUTH_API_URL response: status=%s, body=%s', response.status_code, response.text)
        if response.status_code == 200:
            data = response.json()
            user_details = {
                'username': data.get('userName'),
                'display_name': data.get('displayName'),
                'employee_id': data.get('employeeId')
            }
            logging.debug('Retrieved user details: %s', user_details)
            return user_details
        else:
            logging.error('Auth API call failed: status=%s, body=%s', response.status_code, response.text)
            return None
    except Exception as e:
        logging.error('Error fetching user details: %s', str(e))
        return None

@login_manager.user_loader
def load_user(user_id):
    logging.debug('Loading user %s', user_id)
    return users.get(user_id)

# Check allowed file extensions
def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in config.ALLOWED_EXTENSIONS

# Validate file location
def validate_file_location(location):
    if not location.startswith(config.UPLOAD_BASE_DIR):
        logging.error('File location does not start with %s: %s', config.UPLOAD_BASE_DIR, location)
        return False
    try:
        if not os.path.exists(location):
            os.makedirs(location)
            logging.debug('Created directory: %s', location)
        return os.access(location, os.W_OK | os.R_OK)
    except Exception as e:
        logging.error('Invalid file location %s: %s', location, str(e))
        return False

# Fetch uploads for a user
def get_user_uploads(user_id, from_date=None, to_date=None, search_query=None):
    try:
        with sqlite3.connect(config.DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT id, filename, upload_time FROM uploads WHERE user_id = ?', (user_id,))
            all_uploads = cursor.fetchall()
            logging.debug('All uploads for user %s: %s', user_id, all_uploads)
            
            query = '''
                SELECT u.id, u.filename, u.size, u.upload_time, u.user_id, u.file_location, u.download_count
                FROM uploads u 
                WHERE u.user_id = ?
                UNION
                SELECT u.id, u.filename, u.size, u.upload_time, u.user_id, u.file_location, u.download_count
                FROM uploads u 
                JOIN shared_uploads s ON u.id = s.upload_id 
                WHERE s.shared_with = ?
            '''
            params = [user_id, user_id]
            if from_date:
                from_datetime = f"{from_date}T00:00:00"
                query += ' AND u.upload_time >= ?'
                params.append(from_datetime)
            if to_date:
                to_datetime = f"{to_date}T23:59:59.999999"
                query += ' AND u.upload_time <= ?'
                params.append(to_datetime)
            if search_query:
                query += ' AND u.filename LIKE ?'
                params.append(f'%{search_query}%')
            query += ' ORDER BY u.upload_time DESC'
            logging.debug('Executing query: %s with params: %s', query, params)
            cursor.execute(query, params)
            uploads = [{'id': row[0], 'filename': row[1], 'size': row[2], 'upload_time': row[3], 'user_id': row[4], 'file_location': row[5], 'download_count': row[6]} for row in cursor.fetchall()]
            logging.debug('Fetched %d uploads for user %s: %s', len(uploads), user_id, uploads)
            return uploads
    except Exception as e:
        logging.error('Error fetching uploads: %s', str(e))
        return []

# Root route with Windows authentication
@app.route('/')
def index():
    logging.debug('Accessing index route')
    logging.debug('Request headers: %s', dict(request.headers))
    logging.debug('Query parameters: %s', dict(request.args))
    
    # Clear existing session to force re-authentication
    if current_user.is_authenticated:
        logging.debug('Clearing existing session for user %s', current_user.id)
        logout_user()
        session.clear()

    # Attempt to authenticate user
    user_details = get_user_details()
    if user_details:
        user_id = user_details['username']
        if user_id not in users:
            user = User(
                id=user_id,
                username=user_details['username'],
                display_name=user_details['display_name'],
                employee_id=user_details['employee_id']
            )
            users[user_id] = user
        login_user(users[user_id])
        logging.debug('Authenticated user %s', user_id)
    else:
        logging.error('Failed to authenticate user via Windows authentication')
        return jsonify({'error': 'Authentication failed'}), 401
    
    today = datetime.now().strftime('%Y-%m-%d')
    from_date = request.args.get('from_date', today)
    to_date = request.args.get('to_date', today)
    search_query = request.args.get('search')
    try:
        datetime.strptime(from_date, '%Y-%m-%d')
        datetime.strptime(to_date, '%Y-%m-%d')
        if from_date > to_date:
            logging.warning('From date %s is after to date %s', from_date, to_date)
            return redirect(url_for('index', notification='From date cannot be after to date', notification_type='danger'))
    except ValueError:
        logging.error('Invalid date format: from_date=%s, to_date=%s', from_date, to_date)
        return redirect(url_for('index', notification='Invalid date format', notification_type='danger'))
    
    uploads = get_user_uploads(current_user.id, from_date, to_date, search_query)
    notification = request.args.get('notification')
    notification_type = request.args.get('notification_type', 'success')
    
    try:
        response = make_response(render_template(
            'index.html',
            users=[u for u in users.keys() if u != current_user.id],
            uploads=uploads,
            from_date=from_date,
            to_date=to_date,
            search_query=search_query,
            notification=notification,
            notification_type=notification_type,
            upload_base_dir=config.UPLOAD_BASE_DIR
        ))
        response.headers['Content-Type'] = 'text/html'
        logging.debug('Rendered index.html successfully with %d uploads: %s', len(uploads), uploads)
        return response
    except Exception as e:
        logging.error('Error rendering index.html: %s', str(e))
        return jsonify({'error': f'Failed to render page: {str(e)}'}), 500

# Logout route
@app.route('/logout')
@login_required
def logout():
    logging.debug('User %s logging out', current_user.id)
    logout_user()
    session.clear()
    return redirect(url_for('index'))

# Upload endpoint
@app.route('/upload', methods=['POST'])
@login_required
def upload_file():
    logging.debug('User %s attempting file upload', current_user.id)
    if 'file' not in request.files or 'file_location' not in request.form:
        logging.error('Missing file or file_location')
        return redirect(url_for('index', notification='Missing file or file location', notification_type='danger'))
    file = request.files['file']
    file_location = request.form['file_location']
    if file.filename == '':
        logging.error('No file selected')
        return redirect(url_for('index', notification='No file selected', notification_type='danger'))
    if not validate_file_location(file_location):
        logging.error('Invalid or inaccessible file location: %s', file_location)
        return redirect(url_for('index', notification='Invalid or inaccessible file location', notification_type='danger'))
    if file and allowed_file(file.filename):
        if file.content_length and file.content_length > config.MAX_FILE_SIZE:
            logging.error('File too large: %s', file.filename)
            return redirect(url_for('index', notification='File too large', notification_type='danger'))
        timestamp = str(datetime.now().timestamp()).replace('.', '')
        name, ext = os.path.splitext(file.filename)
        filename = secure_filename(f"{name}_{timestamp}{ext}")
        file_path = os.path.join(file_location, filename)
        file.save(file_path)
        logging.debug('Saved file %s to %s', filename, file_path)
        try:
            with sqlite3.connect(config.DB_PATH) as conn:
                cursor = conn.cursor()
                cursor.execute(
                    'INSERT INTO uploads (filename, size, upload_time, user_id, file_location, download_count) VALUES (?, ?, ?, ?, ?, ?)',
                    (filename, os.path.getsize(file_path), datetime.now().isoformat(), current_user.id, file_location, 0)
                )
                conn.commit()
                logging.debug('Logged upload to database: %s by %s at %s', filename, current_user.id, file_location)
            return redirect(url_for('index', notification=f'File {filename} uploaded successfully', notification_type='success'))
        except Exception as e:
            logging.error('Error saving to database: %s', str(e))
            return redirect(url_for('index', notification='Database error', notification_type='danger'))
    logging.error('Invalid file type: %s', file.filename)
    return redirect(url_for('index', notification='Invalid file type', notification_type='danger'))

# Share upload endpoint
@app.route('/share/<int:upload_id>', methods=['POST'])
@login_required
def share_file(upload_id):
    logging.debug('User %s attempting to share upload %d', current_user.id, upload_id)
    shared_with = request.form.get('shared_with')
    if not shared_with:
        logging.error('No user ID provided for sharing')
        return redirect(url_for('index', notification='Please enter a user ID to share with', notification_type='danger'))
    if shared_with not in users:
        logging.error('Invalid user to share with: %s', shared_with)
        return redirect(url_for('index', notification=f'Invalid user: {shared_with}', notification_type='danger'))
    try:
        with sqlite3.connect(config.DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT id FROM uploads WHERE id = ? AND user_id = ?', (upload_id, current_user.id))
            if not cursor.fetchone():
                logging.error('Upload %d not found or not owned by %s', upload_id, current_user.id)
                return redirect(url_for('index', notification='Upload not found or not owned', notification_type='danger'))
            cursor.execute(
                'INSERT INTO shared_uploads (upload_id, shared_by, shared_with, shared_time) VALUES (?, ?, ?, ?)',
                (upload_id, current_user.id, shared_with, datetime.now().isoformat())
            )
            conn.commit()
            logging.debug('Shared upload %d with %s', upload_id, shared_with)
        return redirect(url_for('index', notification=f'Shared with {shared_with} successfully', notification_type='success'))
    except Exception as e:
        logging.error('Error sharing file: %s', str(e))
        return redirect(url_for('index', notification='Database error', notification_type='danger'))

# List files (for API compatibility)
@app.route('/files', methods=['GET'])
@login_required
def list_files():
    logging.debug('User %s listing files', current_user.id)
    try:
        with sqlite3.connect(config.DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute(
                '''
                SELECT filename FROM uploads WHERE user_id = ?
                UNION
                SELECT u.filename FROM uploads u 
                JOIN shared_uploads s ON u.id = s.upload_id 
                WHERE s.shared_with = ?
                ''',
                (current_user.id, current_user.id)
            )
            files = [row[0] for row in cursor.fetchall()]
        return jsonify(files), 200
    except Exception as e:
        logging.error('Error listing files: %s', str(e))
        return jsonify({'error': 'Error reading files'}), 500

# Download file
@app.route('/download/<filename>', methods=['GET'])
@login_required
def download_file(filename):
    logging.debug('User %s downloading file %s', current_user.id, filename)
    try:
        with sqlite3.connect(config.DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute(
                'SELECT id, file_location FROM uploads WHERE filename = ? AND user_id = ?',
                (filename, current_user.id)
            )
            upload = cursor.fetchone()
            if not upload:
                cursor.execute(
                    '''
                    SELECT u.id, u.file_location FROM uploads u 
                    JOIN shared_uploads s ON u.id = s.upload_id 
                    WHERE u.filename = ? AND s.shared_with = ?
                    ''',
                    (filename, current_user.id)
                )
                upload = cursor.fetchone()
                if not upload:
                    logging.error('File %s not accessible by %s', filename, current_user.id)
                    return redirect(url_for('index', notification='File not accessible', notification_type='danger'))
            upload_id, file_location = upload
            cursor.execute(
                'UPDATE uploads SET download_count = download_count + 1 WHERE id = ?',
                (upload_id,)
            )
            conn.commit()
            logging.debug('Incremented download count for upload %d', upload_id)
        file_path = os.path.join(file_location, filename)
        if os.path.exists(file_path):
            return send_file(file_path, as_attachment=True)
        logging.error('File not found: %s', filename)
        return redirect(url_for('index', notification='File not found', notification_type='danger'))
    except Exception as e:
        logging.error('Error downloading file: %s', str(e))
        return redirect(url_for('index', notification='Server error', notification_type='danger'))

# Get upload history
@app.route('/uploads', methods=['GET'])
@login_required
def get_upload_history():
    logging.debug('User %s fetching upload history', current_user.id)
    today = datetime.now().strftime('%Y-%m-%d')
    from_date = request.args.get('from_date', today)
    to_date = request.args.get('to_date', today)
    search_query = request.args.get('search')
    try:
        datetime.strptime(from_date, '%Y-%m-%d')
        datetime.strptime(to_date, '%Y-%m-%d')
        if from_date > to_date:
            logging.warning('From date %s is after to date %s', from_date, to_date)
            return redirect(url_for('index', notification='From date cannot be after to date', notification_type='danger'))
    except ValueError:
        logging.error('Invalid date format: from_date=%s, to_date=%s', from_date, to_date)
        return redirect(url_for('index', notification='Invalid date format', notification_type='danger'))
    
    uploads = get_user_uploads(current_user.id, from_date, to_date, search_query)
    try:
        response = make_response(render_template(
            'index.html',
            users=[u for u in users.keys() if u != current_user.id],
            uploads=uploads,
            from_date=from_date,
            to_date=to_date,
            search_query=search_query,
            notification='Filtered uploads' if uploads else 'No files found',
            notification_type='success' if uploads else 'warning',
            upload_base_dir=config.UPLOAD_BASE_DIR
        ))
        response.headers['Content-Type'] = 'text/html'
        logging.debug('Rendered index.html with filtered uploads: %d - %s', len(uploads), uploads)
        return response
    except Exception as e:
        logging.error('Error rendering upload history: %s', str(e))
        return jsonify({'error': f'Failed to render page: {str(e)}'}), 500

# Health check endpoint
@app.route('/health')
def health():
    logging.debug('Health check accessed')
    return jsonify({'status': 'Server running', 'debug_mode': app.debug}), 200

if __name__ == '__main__':
    init_db()
    logging.debug('Starting Flask server')
    try:
        app.run(host='0.0.0.0', port=3000, debug=config.DEBUG)
    except Exception as e:
        logging.error('Failed to start Flask server: %s', str(e))
        print(f"Failed to start server: {e}")
'@

    "$baseDir\config.py" = @'
import os
from dotenv import load_dotenv

# Load environment variables
env = os.getenv('FLASK_ENV', 'dev')
load_dotenv(os.path.join(os.path.dirname(__file__), 'env', f'{env}.env'))

class Config:
    SECRET_KEY = os.getenv('SECRET_KEY', 'super-secret-key')
    UPLOAD_BASE_DIR = os.getenv('UPLOAD_BASE_DIR')
    DB_PATH = os.getenv('DB_PATH')
    ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'pdf'}
    MAX_FILE_SIZE = 100 * 1024 * 1024  # 100MB
    AUTH_API_URL = os.getenv('AUTH_API_URL')
    LOG_FILE = os.getenv('LOG_FILE')

class DevConfig(Config):
    DEBUG = True
    LOG_LEVEL = 'DEBUG'

class UATConfig(Config):
    DEBUG = False
    LOG_LEVEL = 'INFO'

class ProdConfig(Config):
    DEBUG = False
    LOG_LEVEL = 'INFO'

config_map = {
    'dev': DevConfig,
    'uat': UATConfig,
    'prod': ProdConfig
}

def get_config():
    return config_map.get(env, DevConfig)
'@

    "$baseDir\requirements.txt" = @'
flask
flask-login
requests
flask-cors
requests-kerberos
requests-ntlm
python-dotenv
gunicorn
wfastcgi
'@

    "$baseDir\scripts\setup_db.py" = @'
import sqlite3
import os
from config import get_config

config = get_config()

def setup_db():
    try:
        os.makedirs(os.path.dirname(config.DB_PATH), exist_ok=True)
        with sqlite3.connect(config.DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS uploads (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    filename TEXT NOT NULL,
                    size INTEGER NOT NULL,
                    upload_time TEXT NOT NULL,
                    user_id TEXT NOT NOT NULL,
                    file_location TEXT NOT NULL,
                    download_count INTEGER DEFAULT 0
                )
            ''')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_user_id ON uploads(user_id)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_upload_time ON uploads(upload_time)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_filename ON uploads(filename)')
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS shared_uploads (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    upload_id INTEGER NOT NULL,
                    shared_by TEXT NOT NULL,
                    shared_with TEXT NOT NULL,
                    shared_time TEXT NOT NULL,
                    FOREIGN KEY(upload_id) REFERENCES uploads(id)
                )
            ''')
            conn.commit()
            print(f"Database initialized at {config.DB_PATH}")
    except Exception as e:
        print(f"Failed to initialize database: {e}")

if __name__ == "__main__":
    setup_db()
'@

    "$baseDir\scripts\run_dev.ps1" = @'
$env:FLASK_ENV="dev"
cd C:\file-upload-center
.\venv\Scripts\Activate.ps1
python app.py
'@

    "$baseDir\scripts\run_uat.sh" = @'
#!/bin/bash
export FLASK_ENV=uat
cd /file-upload-center
source venv/bin/activate
gunicorn --bind 0.0.0.0:3000 app:app
'@

    "$baseDir\scripts\run_prod.sh" = @'
#!/bin/bash
export FLASK_ENV=prod
cd /file-upload-center
source venv/bin/activate
gunicorn --bind 0.0.0.0:3000 --workers 4 --threads 4 app:app
'@

    "$baseDir\static\style.css" = @'
body {
    background-color: #f8f9fa;
}
.container {
    max-width: 900px;
}
.card {
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    border: 1px solid #2a73b2;
}
.card-title {
    color: #2a73b2;
}
.list-group-item {
    border: none;
    padding: 15px;
    margin-bottom: 10px;
    border-radius: 6px;
    background-color: #fff;
}
.list-group-item form {
    margin-left: 10px;
}
.btn-primary {
    background-color: #2a73b2;
    border-color: #2a73b2;
}
.btn-primary:hover {
    background-color: #3e8ac9;
    border-color: #3e8ac9;
}
.btn-primary:active, .btn-primary:focus {
    background-color: #1f5687 !important;
    border-color: #1f5687 !important;
}
.btn-outline-secondary {
    border-color: #2a73b2;
    color: #2a73b2;
}
.btn-outline-secondary:hover {
    background-color: #2a73b2;
    color: #fff;
}
a {
    color: #2a73b2;
}
a:hover {
    color: #3e8ac9;
}
.toast-header {
    background-color: #2a73b2;
    color: #fff;
}
.toast-header .btn-close {
    filter: invert(1);
}
.form-control:focus {
    border-color: #2a73b2;
    box-shadow: 0 0 0 0.2rem rgba(42, 115, 178, 0.25);
}
.toast-container {
    z-index: 1050;
}
.form-control-sm {
    width: 200px;
    display: inline-block;
}
.btn-sm {
    margin-left: 5px;
}
@media (max-width: 576px) {
    .list-group-item {
        flex-direction: column;
        align-items: flex-start;
    }
    .list-group-item form {
        margin-top: 10px;
        margin-left: 0;
    }
    .form-control-sm {
        width: 100%;
    }
    .d-flex {
        flex-direction: column;
        align-items: flex-start;
    }
    .d-flex .btn {
        margin-top: 10px;
    }
    .row.align-items-end > .col-md-3 {
        margin-bottom: 10px;
    }
}
'@

    "$baseDir\templates\index.html" = @'
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>File Upload Center</title>
    <link rel="stylesheet" href="/static/style.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-4">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1 class="mb-0">File Upload Center</h1>
            {% if current_user.is_authenticated %}
                <div>
                    <span class="me-3">Welcome, {{ current_user.display_name }}!</span>
                    <a href="{{ url_for('logout') }}" class="btn btn-outline-secondary btn-sm">Logout</a>
                </div>
            {% endif %}
        </div>
        
        {% if current_user.is_authenticated %}
            <!-- Toast Notification -->
            {% if notification %}
                <div class="toast-container position-fixed bottom-0 end-0 p-3">
                    <div class="toast" role="alert" aria-live="assertive" aria-atomic="true" data-bs-autohide="true" data-bs-delay="5000">
                        <div class="toast-header">
                            <strong class="me-auto">{{ 'Success' if notification_type == 'success' else 'Error' if notification_type == 'danger' else 'Warning' }}</strong>
                            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                        </div>
                        <div class="toast-body">{{ notification }}</div>
                    </div>
                </div>
            {% endif %}

            <!-- Upload Form -->
            <div class="card mb-4">
                <div class="card-body">
                    <h2 class="card-title h5">Upload File</h2>
                    <form id="uploadForm" action="{{ url_for('upload_file') }}" method="post" enctype="multipart/form-data" class="row g-3">
                        <div class="col-md-6">
                            <label for="file" class="form-label">Choose File</label>
                            <input type="file" class="form-control" id="file" name="file" accept=".png,.jpg,.jpeg,.pdf" required>
                        </div>
                        <div class="col-md-6">
                            <label for="file_location" class="form-label">File Location</label>
                            <input type="text" class="form-control" id="file_location" name="file_location" value="{{ upload_base_dir }}" required>
                        </div>
                        <div class="col-12">
                            <button type="submit" class="btn btn-primary" id="uploadButton">
                                <span id="uploadSpinner" class="spinner-border spinner-border-sm d-none" role="status"></span>
                                Upload
                            </button>
                        </div>
                    </form>
                </div>
            </div>

            <!-- Filter and Search -->
            <div class="card mb-4">
                <div class="card-body">
                    <h2 class="card-title h5">Filter & Search Uploads</h2>
                    <form id="filterForm" action="{{ url_for('get_upload_history') }}" method="get" class="row g-3 align-items-end">
                        <div class="col-md-3">
                            <label for="from_date" class="form-label">From Date</label>
                            <input type="date" class="form-control" id="from_date" name="from_date" value="{{ from_date or (now() | strftime('%Y-%m-%d')) }}" required>
                        </div>
                        <div class="col-md-3">
                            <label for="to_date" class="form-label">To Date</label>
                            <input type="date" class="form-control" id="to_date" name="to_date" value="{{ to_date or (now() | strftime('%Y-%m-%d')) }}" required>
                        </div>
                        <div class="col-md-3">
                            <label for="search" class="form-label">Search Filename</label>
                            <input type="text" class="form-control" id="search" name="search" value="{{ search_query or '' }}" placeholder="Enter filename">
                        </div>
                        <div class="col-md-3">
                            <button type="submit" class="btn btn-primary me-2" id="filterButton">Filter</button>
                            <a href="{{ url_for('index') }}" class="btn btn-outline-secondary">Clear</a>
                        </div>
                    </form>
                </div>
            </div>

            <!-- Upload History -->
            <div class="card">
                <div class="card-body">
                    <h2 class="card-title h5">Your Files</h2>
                    {% if uploads %}
                        <div class="list-group">
                            {% for upload in uploads %}
                                <div class="list-group-item list-group-item-action d-flex justify-content-between align-items-center">
                                    <div>
                                        <strong>ID: {{ upload.id }}</strong><br>
                                        <strong>{{ upload.filename }}</strong><br>
                                        <small>{{ upload.size }} bytes, {{ upload.upload_time | strftime('%Y-%m-%d %H:%M:%S') }}, Downloads: {{ upload.download_count }}</small>
                                    </div>
                                    <div>
                                        <a href="{{ url_for('download_file', filename=upload.filename) }}" class="btn btn-sm btn-primary">Download</a>
                                        <form action="{{ url_for('share_file', upload_id=upload.id) }}" method="post" class="d-inline" id="shareForm-{{ upload.id }}">
                                            <input type="text" name="shared_with" class="form-control form-control-sm d-inline w-auto" placeholder="Enter user ID" required>
                                            <button type="submit" class="btn btn-sm btn-secondary" id="shareButton-{{ upload.id }}">
                                                <span id="shareSpinner-{{ upload.id }}" class="spinner-border spinner-border-sm d-none" role="status"></span>
                                                Share
                                            </button>
                                        </form>
                                    </div>
                                </div>
                            {% endfor %}
                        </div>
                    {% else %}
                        <p class="text-muted">No files found.</p>
                    {% endif %}
                </div>
            </div>
        {% else %}
            <p>Please authenticate to access this page.</p>
        {% endif %}
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Debug uploads
            console.log('Uploads:', {{ uploads | tojson }});

            // Show toasts
            var toasts = document.querySelectorAll('.toast');
            toasts.forEach(toast => new bootstrap.Toast(toast).show());

            // Show spinner on upload form submit
            document.getElementById('uploadForm').addEventListener('submit', function () {
                document.getElementById('uploadSpinner').classList.remove('d-none');
                document.getElementById('uploadButton').disabled = true;
            });

            // Show spinner on share form submit
            document.querySelectorAll('[id^="shareForm-"]').forEach(form => {
                form.addEventListener('submit', function () {
                    var uploadId = form.id.split('-')[1];
                    document.getElementById(`shareSpinner-${uploadId}`).classList.remove('d-none');
                    document.getElementById(`shareButton-${uploadId}`).disabled = true;
                });
            });

            // Validate and show spinner on filter form submit
            document.getElementById('filterForm').addEventListener('submit', function (e) {
                var fromDate = document.getElementById('from_date').value;
                var toDate = document.getElementById('to_date').value;
                if (fromDate && toDate && fromDate > toDate) {
                    e.preventDefault();
                    alert('From date cannot be after to date');
                    return;
                }
                document.getElementById('filterButton').innerHTML = '<span class="spinner-border spinner-border-sm" role="status"></span> Filtering...';
                document.getElementById('filterButton').disabled = true;
            });
        });
    </script>
</body>
</html>
'@

    "$baseDir\env\dev.env" = @'
FLASK_ENV=dev
SECRET_KEY=dev-secret-key
UPLOAD_BASE_DIR=C:\shared_dev
DB_PATH=C:\shared_dev\uploads.db
AUTH_API_URL=http://auth-api-dev.company.com/user
LOG_FILE=C:\file-upload-center\logs\app_dev.log
'@

    "$baseDir\env\uat.env" = @'
FLASK_ENV=uat
SECRET_KEY=uat-secret-key
UPLOAD_BASE_DIR=C:\shared_uat
DB_PATH=C:\shared_uat\uploads.db
AUTH_API_URL=http://auth-api-uat.company.com/user
LOG_FILE=C:\file-upload-center\logs\app_uat.log
'@

    "$baseDir\env\prod.env" = @'
FLASK_ENV=prod
SECRET_KEY=prod-secret-key
UPLOAD_BASE_DIR=C:\shared_prod
DB_PATH=C:\shared_prod\uploads.db
AUTH_API_URL=http://auth-api.company.com/user
LOG_FILE=C:\file-upload-center\logs\app_prod.log
'@

    "$baseDir\README.md" = @'
# File Upload Center
A Flask app for secure file uploads with Windows authentication.

## Environments
- **Dev**: `http://<your-machine-name>:3000`
- **UAT**: `http://uat-server.company.com`
- **Prod**: `https://file-upload-center-prod.azurewebsites.net`

## Setup
1. Install dependencies:
   ```bash
   pip install -r requirements.txt python-dotenv